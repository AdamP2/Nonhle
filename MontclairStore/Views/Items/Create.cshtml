@model MontclairModels.ItemEntity

@{
                /**/

                ViewBag.Title = "Create";
}

<h2>Create</h2>

<div class="row">
    <div class="col-md-6">
        @using (Html.BeginForm("Create", "Items", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>ItemEntity</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Category_ID, "Category N", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("Category_ID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Category_ID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.colour, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.colour, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.colour, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.flavour, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.flavour, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.flavour, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.size, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.size, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.size, "", new { @class = "text-danger" })
                </div>
            </div>
              <div class="form-group">
                @Html.LabelFor(model => model.shape, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.shape, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.shape, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
            @Html.LabelFor(model => model.QuantityInStock, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QuantityInStock, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QuantityInStock, "", new { @class = "text-danger" })
            </div>
        </div>*@
            <div class="form-group">
                @Html.LabelFor(model => model.Picture, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    <input type="file" name="img_upload" accept=".jpeg,.jpg,.png" onchange="readURL(this);" class="form-control" required="required" />
                    @Html.ValidationMessageFor(model => model.Picture, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>

            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>
        </div>
            
        }
    </div>
 
    <div class="col-md-6">
        <div class="col-md-6">
            <img id="image_preview" src="#" alt="" />
        </div>

        <script type="text/javascript">
            //image preview
            function readURL(input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#image_preview')
                            .attr('src', e.target.result)
                            .width(400)
                            .height(400);

                    };

                    reader.readAsDataURL(input.files[0]);
                }
            }
        </script>
    </div>



    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
